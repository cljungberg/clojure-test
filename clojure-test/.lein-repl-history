(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
 (run-tests)
(defmethod full-moon-behavior nil
  [were-creature]
  (str (:name were-creature) " will stay at home and eat ice cream"))
(defrecord UserModel [name age id language]) ;{:name "Matt" :age 36 :id 2 :language "clojure"}
(s/def ::positive-int (s/and int? #(> % 0)))
(s/def ::full-string (s/and string? #(> (count %) 0)))
(s/def ::name ::full-string)
(s/def ::age ::positive-int)
(s/def ::id ::positive-int)
(s/def ::language ::full-string)
(s/def ::user-model (s/keys :req-un [::name ::age ::id ::language]))
(defn get-user-model [name age id language]
  (let [model (->UserModel name age id language)]
    (if (s/valid? ::user-model model) model
        (throw (Exception. (str (s/explain ::user-model model)))))))
(defmulti adult? class)
(defmethod adult? UserModel [{:keys [age]}]
  (> age 18))
(adult? [3])
(adult? {:age 3})
(adult? [{3}])
(adult? [{age 3}])
(adult? [{'age' 3}])
(adult? [{:age 3}])
(adult? array-map [3])
(adult? array-map [age 3])
(adult? array-map ['age' 3])
(adult? (array-map ['age' 3]))
(adult? (array-map [:age 3]))
(adult? (array-map [::age 3]))
(adult? (array-map [:req-un3]))
(adult? (array-map [:req-un 3]))
(adult? 3)
(user-tests)
(run-tests)
(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
(run-tests)
(some->> (um/get-user-model "Lisa" 17 2 "clojure")
                    (filter um/adult?))
(filter adult? [{:name "Matt" :age 36 :id 2 :language "clojure"}])
(class (filter adult? [{:name "Matt" :age 36 :id 2 :language "clojure"}]))
(class (map-array (filter adult? [{:name "Matt" :age 36 :id 2 :language "clojure"}])))
(class (array-map (filter adult? [{:name "Matt" :age 36 :id 2 :language "clojure"}])))
(array-map [{:a 1}]
)
(array-map [{1 1}])
(array-map [1 2] [3 4 5])
(array-map [1 2])
(array-map [1] [3])
(array-map [::age] [3])
(array-map [:age] [3])
(def x UserModel ["1" 2 2 "l"])
(def x (UserModel ["1" 2 2 "l"]))
(defrecord UserModel [name age id language])
(def x (test.user-model/UserModel ["1" 2 2 "l"]))
(def x (um/UserModel ["1" 2 2 "l"]))
(def x (test.user-model/UserModel "1" 2 2 "l"))
(def x (UserModel "1" 2 2 "l"))
(def x (test.user-model/UserModel "1" 2 2 "l"))
(doc ::positive-int)
(s/doc ::positive-int)
(ns test.user-model
  (:gen-class)
  (:require [clojure.spec.alpha :as s]))
(defrecord UserModel [name age id language]) ;{:name "Matt" :age 36 :id 2 :language "clojure"}
(s/def ::positive-int (s/and int? #(> % 0)))
(s/def ::full-string (s/and string? #(> (count %) 0)))
(s/def ::name ::full-string)
(s/def ::age ::positive-int)
(s/def ::id ::positive-int)
(s/def ::language ::full-string)
(s/def ::user-model (s/keys :req-un [::name ::age ::id ::language]))
(defn get-user-model [name age id language]
  (let [model (->UserModel name age id language)]
    (if (s/valid? ::user-model model) model
        (throw (Exception. (str (s/explain ::user-model model)))))))
(defmulti adult? class)
(defmethod adult? UserModel [{:keys [age]}]
  (> age 18))
(doc ::positive-int)
(s/doc ::positive-int)
(s/conform ::positive-int 2)
(s/conform ::positive-int -1)
(s/valid ::positive-int -1)
(s/valid? ::positive-int -1)
(s/valid? ::full-string "")
(s/valid? ::full-string "dd")
(s/valid? ::name "dd")
(s/valid? ::age "dd")
(s/valid? ::language "")
(s/valid? ::user-model "")
(s/valid? ::user-model {:name "Matt" :age 36 :id 2 :language "clojure"})
(s/valid? ::user-model {:name "Matt" :age -36 :id 2 :language "clojure"})
(s/valid? ::user-model {:name "Matt" :age -36 :id 2})
(s/valid? adult? {:name "Matt" :age -36 :id 2})
(s/valid? (adult? {:name "Matt" :age -36 :id 2}))
(s/explain-data ::user-model {:name "Matt" :age -36 :id 2})
(defmulti f "Great function" (fn [x] :blah))
(doc f)
(adult? {:name "Matt", :age -36, :id 2}
)
(adult? [:name "Matt"] [:age -36])
(adult? (array-map [:name "Matt"] [:age -36]))
(defrecord Person [fname lname address])
(defrecord Address [street city state zip])
(def stu (Person. "Stu" "Halloway"
           (Address. "200 N Mangum"
                      "Durham"
                      "NC"
                      27701)))
(:lname stu)
(-> stu :address :city)
(def user (get-user-model "Lisa" 17 2 "clojure"))
user
(:age user)
([{:keys [age]}] user)
(adult? 3)
(adult? 23)
(adult? {:name "Matt" :age 36 :id 2 :language "clojure"})
(adult? {:name "Matt" :age 3 :id 2 :language "clojure"})
(adult? (get-user-model "Christina" 47 2 "clojure"))
(adult? (get-user-model "Christina" 7 2 "clojure"))
(testing "Validate that Lisa is not an adult"
    (is (= true (adult? (get-user-model "Christina" 7 2 "clojure")))))
(run-tests)
(require 'test.user-model-test :reload-all)
; (in-ns 'test.user-model-test)
; (run-tests)
(in-ns 'test.user-model-test)
(run-tests)
(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
(run-tests)
(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
(run-tests)
(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
(run-tests)
(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
(run-tests)
(require 'test.user-model-test :reload-all)
(in-ns 'test.user-model-test)
(run-tests)
